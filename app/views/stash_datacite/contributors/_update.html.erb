<%# the local variable 'contributor' should be passed in to this partial when there are multiple per page %>
<%= form_for(contributor, url: stash_datacite.contributors_update_path, remote: true, authenticity_token: true) do |f| %>
  <%#= render "datacite/shared/error_messages", target: @contributor %>
    <table>
    <tr>
        <td><%= f.label :contributor_name, "Granting Organization" %></td>
        <td><%= f.label :award_number, "Award Number" %></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <td><%= f.text_field :contributor_name, size: 70 , class: "funders" %>&nbsp;&nbsp;&nbsp;&nbsp;</td>
        <td><%= f.text_field :award_number, size: 35, class: "award_number" %>&nbsp;&nbsp;</td>
        <td><%= link_to 'remove', stash_datacite.contributors_delete_path(contributor.id), method: :delete, remote: true, data: { confirm: 'Are you sure?' }, class: 'remove_record' %></td>
    </tr>
    <%= f.hidden_field :contributor_type, value: :funder %>
    <%= f.hidden_field :resource_id %>
    <%= f.hidden_field :id %>
  </table>
<% end %>

<script>
  // based on example at http://jqueryui.com/autocomplete/#remote-jsonp
  $(function() {
    function split( val ) {
      return val.split( /,\s*/ );
    }
    function extractLast( term ) {
      return split( term ).pop();
    }

    $( ".funders" )
      // don't navigate away from the field on tab when selecting an item
      .bind( "keydown", function( event ) {
        if ( event.keyCode === $.ui.keyCode.TAB &&
            $( this ).autocomplete( "instance" ).menu.active ) {
          event.preventDefault();
        }
      })
      .autocomplete({
        source: function( request, response ) {
          $.ajax({
            url: "https://api.crossref.org/funders?query="+ extractLast( request.term ),
            dataType: "json",
            success: function( data ) {
                var arr = jQuery.map( data.message.items, function( a ) {
                return [[ a.id, a.name, a.uri ]];
              });
              console.log(arr);
              var labels = [];
              $.each(arr, function(index, value) {
                labels.push(value[1]);
              });
              response(labels);
            }
          });
        },
        minLength: 1,
        focus: function() {
          // prevent value inserted on focus
          return false;
        },
      });
    });

  $(document).ready(function(){
    $( ".funders" ).on('focus', function () {
      previous_value = this.value;
      }).change(function() {
        new_value = this.value;
        // Save when the new value is different from the previous value
        if(new_value != previous_value) {
          var form = $(this).parents('form');
          $(form).trigger('submit.rails');
        }
    });
  });

  $(document).ready(function(){
    $( ".award_number" ).on('focus', function () {
      previous_value = this.value;
      }).change(function() {
        new_value = this.value;
        // Save when the new value is different from the previous value
        if(new_value != previous_value) {
          var form = $(this).parents('form');
          $(form).trigger('submit.rails');
        }
    });
  });
</script>