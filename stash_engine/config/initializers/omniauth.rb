Rails.application.config.middleware.use OmniAuth::Builder do
  provider :shibboleth,
           :callback_path => '/stash/auth/shibboleth/callback',
           :request_type   => :header,
           :host            => StashEngine.app.shib_sp_host,
           :uid_field       => 'eppn',
           :path_prefix     => '/stash/auth',
           :info_fields => {
               :email               => 'mail',
               :identity_provider   => 'shib_identity_provider'
           }

  unless Rails.env.production? || Rails.env.stage?

    provider :developer,
             :callback_path => '/stash/auth/developer/callback',
             :path_prefix => '/stash/auth',
             :fields => [:name, :email, :test_domain],
             :uid_field => :email
  end

  provider :google_oauth2, StashEngine.app.google_client_id, StashEngine.app.google_client_secret,
           :callback_path  => '/stash/auth/google_oauth2/callback',
           :path_prefix    => '/stash/auth'

  provider :orcid, StashEngine.app.orcid_key, StashEngine.app.orcid_secret,
           :member => StashEngine.app.member,
           :sandbox => StashEngine.app.sandbox,
           :callback_path  => '/stash/auth/orcid/callback',
           :path_prefix    => '/stash/auth',
           :full_host => 'https://noodles.example.com',
           :authorize_params => {
               :scope => '/authenticate'
           },
           :client_options => {
               :site => StashEngine.app.orcid_site,
               :authorize_url => StashEngine.app.orcid_authorize_url,
               :token_url => StashEngine.app.orcid_token_url
           }

  # this is to deal with http URLs being generated by omniauth when we want https but we have a reverse proxy causing problems
  # TODO: Good f-ing hell.  This works on my system but it has nils on the server.
  OmniAuth.config.full_host = -> (env) do
    # "omniauth.strategy"=>#<OmniAuth::Strategies::ORCID> might be helpful if we need to know if strategy is ORCID
    u = URI.parse("http://#{env['HTTP_X_FORWARDED_HOST'] || env['HTTP_HOST']}")
    u.scheme = 'https' if env['omniauth.strategy'].to_s.include?('ORCID') && !u.host.include?('localhost')
    "#{u.scheme}://#{u.host}#{(u.port == 80 ? '' : ":#{u.port}" )}" # only add port if it's not 80
  end

  ## Omniauth on_failure behavior to work for all ENV including localhost
  OmniAuth.config.on_failure = -> (env) do
    Rack::Response.new(['302 Moved'], 302, 'Location' => env['omniauth.origin'] || "/").finish
  end
end

